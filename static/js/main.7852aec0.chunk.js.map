{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD_ALPHABET","SORT_FIELD_LENGTH","App","_useState","useState","_useState2","_slicedToArray","sortField","setSortField","_useState3","_useState4","isReverse","setIsReverse","visibleGoods","goods","arguments","length","undefined","preparedGoods","_toConsumableArray","sort","good1","good2","localeCompare","reverse","getPreparedGoods","_jsxs","className","children","_jsx","type","cn","onClick","prev","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAMaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EAAsB,WACtBC,EAAoB,SAuBnB,IAAMC,EAAM,WACjB,IAAAC,EAAkCC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAvCI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,EAAkCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAExBG,EAzBR,SAA0BC,EAAOP,GAA+B,IAApBI,EAASI,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAC7CG,EAAaC,YAAOL,GAiB1B,OAfIP,GACFW,EAAcE,MAAK,SAACC,EAAOC,GACzB,OAAQf,GACN,KAAKP,EACH,OAAOqB,EAAME,cAAcD,GAE7B,KAAKrB,EACH,OAAOoB,EAAML,OAASM,EAAMN,OAE9B,QACE,OAAO,MAKRL,EAAYO,EAAcM,UAAYN,EAOxBO,CAAiB1B,EAAiBQ,EAAWI,GAOlE,OAEEe,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBC,cAAA,UACEC,KAAK,SACLH,UACEI,IAAG,iBACD,CAAE,WAAYxB,IAAcP,IAEhCgC,QAAS,kBAAMxB,EAAaR,IAAqB4B,SAClD,wBAIDC,cAAA,UACEC,KAAK,SACLH,UACEI,IAAG,oBACD,CAAE,WAAYxB,IAAcN,IAEhC+B,QAAS,kBAAMxB,EAAaP,IAAmB2B,SAChD,mBAIDC,cAAA,UACEC,KAAK,SACLH,UACEI,IAAG,oBAAqB,CAAE,YAAapB,IAEzCqB,QAAS,kBAAMpB,GAAa,SAAAqB,GAAI,OAAKA,MAAML,SAC5C,aAIgB,KAAdrB,GAAoBI,IACnBkB,cAAA,UACEC,KAAK,SACLH,UAAU,4BACVK,QA7CZ,WACExB,EAAa,IACbI,GAAa,IA2CYgB,SAChB,aAOPC,cAAA,MAAAD,SAEIf,EAAaqB,KAAI,SAAAC,GAAI,OAAIN,cAAA,MAAI,UAAQ,OAAMD,SAAaO,GAAPA,YCrG3DC,IAASC,OACPR,cAAC3B,EAAG,IACJoC,SAASC,eAAe,W","file":"static/js/main.7852aec0.chunk.js","sourcesContent":["import cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD_ALPHABET = 'alphabet';\nconst SORT_FIELD_LENGTH = 'length';\n\nfunction getPreparedGoods(goods, sortField, isReverse = false) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  return isReverse ? preparedGoods.reverse() : preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReverse, setIsReverse] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReverse);\n\n  function reset() {\n    setSortField('');\n    setIsReverse(false);\n  }\n\n  return (\n\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={\n            cn('button is-info',\n              { 'is-light': sortField !== SORT_FIELD_ALPHABET })\n          }\n          onClick={() => setSortField(SORT_FIELD_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button is-success',\n              { 'is-light': sortField !== SORT_FIELD_LENGTH })\n          }\n          onClick={() => setSortField(SORT_FIELD_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={\n            cn('button is-warning', { 'is-light': !isReverse })\n          }\n          onClick={() => setIsReverse(prev => !prev)}\n        >\n          Reverse\n        </button>\n        {\n          (sortField !== '' || isReverse) && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        {\n          visibleGoods.map(good => <li data-cy=\"Good\" key={good}>{good}</li>)\n        }\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}